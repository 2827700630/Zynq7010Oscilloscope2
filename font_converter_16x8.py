#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
STM32字库转HDMI字库转换工具
将STM32的ascii_16x8字库（列行式，逐列扫描，低位在下）
转换为HDMI最优字库（行列式，逐行扫描，低位在左）

字库规格：16像素高，8像素宽
STM32格式：16字节/字符，每字节代表一列（从上到下16个像素）
HDMI格式：16字节/字符，每字节代表一行（从左到右8个像素）

作者：Zynq7010示波器项目组
日期：2025年6月17日
"""

# STM32 ascii_16x8字库数据（从font.c提取）
stm32_ascii_16x8 = [
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], #" ",0
    [0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x00, 0x00, 0x00], #"!",1
    [0x00, 0x10, 0x0C, 0x06, 0x10, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], #""",2
    [0x40, 0xC0, 0x78, 0x40, 0xC0, 0x78, 0x40, 0x00, 0x04, 0x3F, 0x04, 0x04, 0x3F, 0x04, 0x04, 0x00], #"#",3
    [0x00, 0x70, 0x88, 0xFC, 0x08, 0x30, 0x00, 0x00, 0x00, 0x18, 0x20, 0xFF, 0x21, 0x1E, 0x00, 0x00], #"$",4
    [0xF0, 0x08, 0xF0, 0x00, 0xE0, 0x18, 0x00, 0x00, 0x00, 0x21, 0x1C, 0x03, 0x1E, 0x21, 0x1E, 0x00], #"%",5
    [0x00, 0xF0, 0x08, 0x88, 0x70, 0x00, 0x00, 0x00, 0x1E, 0x21, 0x23, 0x24, 0x19, 0x27, 0x21, 0x10], #"&",6
    [0x10, 0x16, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], #"'",7
    [0x00, 0x00, 0x00, 0xE0, 0x18, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x18, 0x20, 0x40, 0x00], #"(",8
    [0x00, 0x02, 0x04, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x18, 0x07, 0x00, 0x00, 0x00], #")",9
    [0x40, 0x40, 0x80, 0xF0, 0x80, 0x40, 0x40, 0x00, 0x02, 0x02, 0x01, 0x0F, 0x01, 0x02, 0x02, 0x00], #"*",10
    [0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x1F, 0x01, 0x01, 0x01, 0x00], #"+",11
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xB0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00], #",",12
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01], #"-",13
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00], #".",14
    [0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0x04, 0x00, 0x60, 0x18, 0x06, 0x01, 0x00, 0x00, 0x00], #"/",15
    [0x00, 0xE0, 0x10, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x0F, 0x10, 0x20, 0x20, 0x10, 0x0F, 0x00], #"0",16
    [0x00, 0x10, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00], #"1",17
    [0x00, 0x70, 0x08, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x30, 0x28, 0x24, 0x22, 0x21, 0x30, 0x00], #"2",18
    [0x00, 0x30, 0x08, 0x88, 0x88, 0x48, 0x30, 0x00, 0x00, 0x18, 0x20, 0x20, 0x20, 0x11, 0x0E, 0x00], #"3",19
    [0x00, 0x00, 0xC0, 0x20, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x07, 0x04, 0x24, 0x24, 0x3F, 0x24, 0x00], #"4",20
    [0x00, 0xF8, 0x08, 0x88, 0x88, 0x08, 0x08, 0x00, 0x00, 0x19, 0x21, 0x20, 0x20, 0x11, 0x0E, 0x00], #"5",21
    [0x00, 0xE0, 0x10, 0x88, 0x88, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x20, 0x20, 0x11, 0x0E, 0x00], #"6",22
    [0x00, 0x38, 0x08, 0x08, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00], #"7",23
    [0x00, 0x70, 0x88, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x1C, 0x22, 0x21, 0x21, 0x22, 0x1C, 0x00], #"8",24
    [0x00, 0xE0, 0x10, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x00, 0x31, 0x22, 0x22, 0x11, 0x0F, 0x00], #"9",25
    [0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00], #":",26
    [0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00], #";",27
    [0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00], #"<",28
    [0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00], #"=",29
    [0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00], #">",30
    [0x00, 0x70, 0x48, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x36, 0x01, 0x00, 0x00], #"?",31
    [0xC0, 0x30, 0xC8, 0x28, 0xE8, 0x10, 0xE0, 0x00, 0x07, 0x18, 0x27, 0x24, 0x23, 0x14, 0x0B, 0x00], #"@",32
    [0x00, 0x00, 0xC0, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x3C, 0x23, 0x02, 0x02, 0x27, 0x38, 0x20], #"A",33
    [0x08, 0xF8, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x11, 0x0E, 0x00], #"B",34
    [0xC0, 0x30, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00, 0x07, 0x18, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00], #"C",35
    [0x08, 0xF8, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x10, 0x0F, 0x00], #"D",36
    [0x08, 0xF8, 0x88, 0x88, 0xE8, 0x08, 0x10, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x23, 0x20, 0x18, 0x00], #"E",37
    [0x08, 0xF8, 0x88, 0x88, 0xE8, 0x08, 0x10, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00], #"F",38
    [0xC0, 0x30, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x07, 0x18, 0x20, 0x20, 0x22, 0x1E, 0x02, 0x00], #"G",39
    [0x08, 0xF8, 0x08, 0x00, 0x00, 0x08, 0xF8, 0x08, 0x20, 0x3F, 0x21, 0x01, 0x01, 0x21, 0x3F, 0x20], #"H",40
    [0x00, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00], #"I",41
    [0x00, 0x00, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0xC0, 0x80, 0x80, 0x80, 0x7F, 0x00, 0x00, 0x00], #"J",42
    [0x08, 0xF8, 0x88, 0xC0, 0x28, 0x18, 0x08, 0x00, 0x20, 0x3F, 0x20, 0x01, 0x26, 0x38, 0x20, 0x00], #"K",43
    [0x08, 0xF8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x20, 0x30, 0x00], #"L",44
    [0x08, 0xF8, 0xF8, 0x00, 0xF8, 0xF8, 0x08, 0x00, 0x20, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x20, 0x00], #"M",45
    [0x08, 0xF8, 0x30, 0xC0, 0x00, 0x08, 0xF8, 0x08, 0x20, 0x3F, 0x20, 0x00, 0x07, 0x18, 0x3F, 0x00], #"N",46
    [0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x0F, 0x10, 0x20, 0x20, 0x20, 0x10, 0x0F, 0x00], #"O",47
    [0x08, 0xF8, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x20, 0x3F, 0x21, 0x01, 0x01, 0x01, 0x00, 0x00], #"P",48
    [0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x0F, 0x18, 0x24, 0x24, 0x38, 0x50, 0x4F, 0x00], #"Q",49
    [0x08, 0xF8, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x03, 0x0C, 0x30, 0x20], #"R",50
    [0x00, 0x70, 0x88, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x38, 0x20, 0x21, 0x21, 0x22, 0x1C, 0x00], #"S",51
    [0x18, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x18, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x00, 0x00], #"T",52
    [0x08, 0xF8, 0x08, 0x00, 0x00, 0x08, 0xF8, 0x08, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x00], #"U",53
    [0x08, 0x78, 0x88, 0x00, 0x00, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x07, 0x38, 0x0E, 0x01, 0x00, 0x00], #"V",54
    [0xF8, 0x08, 0x00, 0xF8, 0x00, 0x08, 0xF8, 0x00, 0x03, 0x3C, 0x07, 0x00, 0x07, 0x3C, 0x03, 0x00], #"W",55
    [0x08, 0x18, 0x68, 0x80, 0x80, 0x68, 0x18, 0x08, 0x20, 0x30, 0x2C, 0x03, 0x03, 0x2C, 0x30, 0x20], #"X",56
    [0x08, 0x38, 0xC8, 0x00, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x00, 0x00], #"Y",57
    [0x10, 0x08, 0x08, 0x08, 0xC8, 0x38, 0x08, 0x00, 0x20, 0x38, 0x26, 0x21, 0x20, 0x20, 0x18, 0x00], #"Z",58
    [0x00, 0x00, 0x00, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x40, 0x40, 0x40, 0x00], #"[",59
    [0x00, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x38, 0xC0, 0x00], #"\",60
    [0x00, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x7F, 0x00, 0x00, 0x00], #"]",61
    [0x00, 0x00, 0x04, 0x02, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], #"^",62
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80], #"_",63
    [0x00, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], #"`",64
    [0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x19, 0x24, 0x22, 0x22, 0x22, 0x3F, 0x20], #"a",65
    [0x08, 0xF8, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x20, 0x20, 0x11, 0x0E, 0x00], #"b",66
    [0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0x20, 0x11, 0x00], #"c",67
    [0x00, 0x00, 0x00, 0x80, 0x80, 0x88, 0xF8, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0x10, 0x3F, 0x20], #"d",68
    [0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x22, 0x22, 0x22, 0x22, 0x13, 0x00], #"e",69
    [0x00, 0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0x18, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00], #"f",70
    [0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x6B, 0x94, 0x94, 0x94, 0x93, 0x60, 0x00], #"g",71
    [0x08, 0xF8, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x3F, 0x21, 0x00, 0x00, 0x20, 0x3F, 0x20], #"h",72
    [0x00, 0x80, 0x98, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00], #"i",73
    [0x00, 0x00, 0x00, 0x80, 0x98, 0x98, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x80, 0x80, 0x7F, 0x00, 0x00], #"j",74
    [0x08, 0xF8, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x20, 0x3F, 0x24, 0x02, 0x2D, 0x30, 0x20, 0x00], #"k",75
    [0x00, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00], #"l",76
    [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x3F, 0x20, 0x00, 0x3F], #"m",77
    [0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x3F, 0x21, 0x00, 0x00, 0x20, 0x3F, 0x20], #"n",78
    [0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x00], #"o",79
    [0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xA1, 0x20, 0x20, 0x11, 0x0E, 0x00], #"p",80
    [0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0xA0, 0xFF, 0x80], #"q",81
    [0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x20, 0x20, 0x3F, 0x21, 0x20, 0x00, 0x01, 0x00], #"r",82
    [0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x33, 0x24, 0x24, 0x24, 0x24, 0x19, 0x00], #"s",83
    [0x00, 0x80, 0x80, 0xE0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x00, 0x00], #"t",84
    [0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x10, 0x3F, 0x20], #"u",85
    [0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x01, 0x0E, 0x30, 0x08, 0x06, 0x01, 0x00], #"v",86
    [0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x80, 0x0F, 0x30, 0x0C, 0x03, 0x0C, 0x30, 0x0F, 0x00], #"w",87
    [0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x31, 0x2E, 0x0E, 0x31, 0x20, 0x00], #"x",88
    [0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x81, 0x8E, 0x70, 0x18, 0x06, 0x01, 0x00], #"y",89
    [0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x21, 0x30, 0x2C, 0x22, 0x21, 0x30, 0x00], #"z",90
    [0x00, 0x00, 0x00, 0x00, 0x80, 0x7C, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x40], #"{",91
    [0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00], #"|",92
    [0x00, 0x02, 0x02, 0x7C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x3F, 0x00, 0x00, 0x00, 0x00], #"}",93
    [0x00, 0x06, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], #"~",94
]

# ASCII字符映射表
ascii_chars = " !\"#$%&'()*+,-./" + \
              "0123456789:;<=>?" + \
              "@ABCDEFGHIJKLMNO" + \
              "PQRSTUVWXYZ[\\]^_" + \
              "`abcdefghijklmno" + \
              "pqrstuvwxyz{|}~"

def convert_stm32_to_hdmi():
    """
    转换STM32字库到HDMI字库
    
    STM32格式：16字节/字符，每字节代表一列（8个像素宽×16个像素高）
    - 高字节(8-15)：上半部分8行
    - 低字节(0-7)：下半部分8行
    - 每字节内：bit7=顶部像素，bit0=底部像素
    
    HDMI格式：16字节/字符，每字节代表一行（8个像素宽×16个像素高）
    - 字节0-15：第0-15行
    - 每字节内：bit0=最左像素，bit7=最右像素
    """
    hdmi_font = []
    
    for char_idx, stm32_char in enumerate(stm32_ascii_16x8):
        hdmi_char = []
        
        # 处理16行
        for row in range(16):
            hdmi_row = 0
            
            # 处理8列
            for col in range(8):
                # 计算在STM32格式中的位置
                if row < 8:
                    # 上半部分：使用高字节(8-15)
                    stm32_byte = stm32_char[col + 8]
                    bit_pos = row  # 0-7
                else:
                    # 下半部分：使用低字节(0-7)
                    stm32_byte = stm32_char[col]
                    bit_pos = row - 8  # 0-7
                
                # 提取STM32字库中的像素位
                if stm32_byte & (1 << bit_pos):
                    hdmi_row |= (1 << col)  # HDMI格式：bit0=最左像素
            
            hdmi_char.append(hdmi_row)
        
        hdmi_font.append(hdmi_char)
        
        # 调试输出前几个字符
        if char_idx < 5:
            char_name = ascii_chars[char_idx] if char_idx < len(ascii_chars) else f"char_{char_idx}"
            print(f"字符 '{char_name}' (索引{char_idx}):")
            print("STM32格式:")
            print("  低字节(0-7):", [f"0x{b:02X}" for b in stm32_char[0:8]])
            print("  高字节(8-15):", [f"0x{b:02X}" for b in stm32_char[8:16]])
            print("HDMI格式:")
            print("  行0-15:", [f"0x{b:02X}" for b in hdmi_char])
            print()
    
    return hdmi_font

def generate_hdmi_font_files(hdmi_font):
    """生成HDMI字库的头文件和源文件"""
    
    # 生成头文件
    header_content = '''/* ------------------------------------------------------------ */
/*           HDMI优化字库16x8 - 从STM32 ascii_16x8转换而来       */
/* ------------------------------------------------------------ */

#ifndef HDMI_FONT_16X8_H
#define HDMI_FONT_16X8_H

#include "xil_types.h"

/* 字库参数定义 */
#define HDMI_FONT_WIDTH_16X8   8    /* 字符宽度（像素） */
#define HDMI_FONT_HEIGHT_16X8  16   /* 字符高度（像素） */
#define HDMI_FONT_COUNT_16X8   95   /* 字符数量（ASCII 32-126） */

/* 
 * HDMI优化16x8点阵字库
 * 格式：行列式，逐行扫描，低位在左
 * 每个字符16字节，每字节代表一行的8个像素
 * 字节中bit0对应最左边像素，bit7对应最右边像素
 * 
 * 从STM32 ascii_16x8（列行式，逐列扫描，低位在下）转换而来
 */
extern const u8 hdmi_font_16x8[][16];

/* ASCII字符映射表 */
extern const char hdmi_ascii_chars_16x8[];

/**
 * 获取字符在字库中的索引
 * @param c 要查找的字符
 * @return 字符索引，未找到返回0（空格）
 */
int hdmi_get_char_index_16x8(char c);

#endif /* HDMI_FONT_16X8_H */'''

    # 生成源文件
    source_content = '''/* ------------------------------------------------------------ */
/*           HDMI优化字库16x8 - 从STM32 ascii_16x8转换而来       */
/* ------------------------------------------------------------ */

#include "hdmi_font_16x8.h"
#include <string.h>

/* ASCII字符映射表 - 按原STM32字库顺序 */
const char hdmi_ascii_chars_16x8[] = " !\\"#$%&'()*+,-./"
                                    "0123456789:;<=>?"
                                    "@ABCDEFGHIJKLMNO"
                                    "PQRSTUVWXYZ[\\\\]^_"
                                    "`abcdefghijklmno"
                                    "pqrstuvwxyz{|}~";

/* 
 * HDMI优化16x8点阵字库
 * 
 * 转换说明：
 * - 原STM32格式：列行式，每个字符16字节，前8字节为低部分列，后8字节为高部分列
 * - HDMI格式：行列式，每个字符16字节，每字节代表一行8像素，低位在左
 * 
 * 转换算法：
 * 对于每个字符的第i行（0-15）：
 *   如果i<8: 从STM32高字节部分(8-15)提取第i位
 *   如果i>=8: 从STM32低字节部分(0-7)提取第(i-8)位
 *   将8列的第i位组成新的字节，bit0=col0, bit1=col1, ..., bit7=col7
 */
const u8 hdmi_font_16x8[][16] = {
'''    # 添加字库数据
    for i, char_data in enumerate(hdmi_font):
        if i < len(ascii_chars):
            char_name = ascii_chars[i]
            if char_name == '\\':
                char_name = '\\\\'
            elif char_name == '"':
                char_name = '\\"'
            comment = f'/* \'{char_name}\' ({32+i}) */'
        else:
            comment = f'/* char_{i} */'
        
        # 修正：将前8字节和后8字节互换
        # 原始: [0-7, 8-15] -> 修正: [8-15, 0-7]
        corrected_data = char_data[8:16] + char_data[0:8]
        
        line = "    {" + ", ".join(f"0x{b:02X}" for b in corrected_data) + f"}}, {comment}"
        source_content += line + "\n"
    
    source_content += '''};

/**
 * 获取字符在字库中的索引
 */
int hdmi_get_char_index_16x8(char c) {
    const char *pos = strchr(hdmi_ascii_chars_16x8, c);
    if (pos != NULL) {
        return (int)(pos - hdmi_ascii_chars_16x8);
    }
    return 0; // 返回空格
}'''

    return header_content, source_content

def main():
    print("STM32字库转HDMI字库转换工具")
    print("字库规格：16像素高 × 8像素宽")
    print("转换方向：STM32列行式 → HDMI行列式")
    print("=" * 50)
    
    # 执行转换
    print("正在转换字库...")
    hdmi_font = convert_stm32_to_hdmi()
    
    # 生成文件内容
    print("正在生成代码文件...")
    header_content, source_content = generate_hdmi_font_files(hdmi_font)
    
    # 写入文件
    with open("hdmi_font_16x8.h", "w", encoding="utf-8") as f:
        f.write(header_content)
    
    with open("hdmi_font_16x8.c", "w", encoding="utf-8") as f:
        f.write(source_content)
    
    print("转换完成！")
    print("生成文件：")
    print("  - hdmi_font_16x8.h (头文件)")
    print("  - hdmi_font_16x8.c (源文件)")
    print(f"  - 字符数量：{len(hdmi_font)}")
    print(f"  - 字库大小：{len(hdmi_font) * 16} 字节")
    print()
    print("使用说明：")
    print("1. 将生成的文件复制到 Vitis 项目的 src/wave/ 目录")
    print("2. 在 UserConfig.cmake 中添加 'wave/hdmi_font_16x8.c'")
    print("3. 更新 oscilloscope_text.h 中的字体尺寸定义")
    print("4. 修改 oscilloscope_text.c 使用新的字库")

if __name__ == "__main__":
    main()
